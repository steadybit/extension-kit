##
# This workflow can be used to build and release extensions.
#
# Pre-requisites:
#  - There is a branch `gh-pages` in the repository
#  - `/gpg.key` is included in .gitignore


name: Extension CI
on:
  workflow_call:
    inputs:
      build_linux_packages:
        type: boolean
        required: true
        description: |
          If set to true, the workflow will build Linux packages
      runs_on:
        type: string
        required: false
        default: ubuntu-latest
      use_kvm:
        type: boolean
        required: false
        default: false
      run_make_prepare_audit:
        type: boolean
        required: false
        default: false
      go_version:
        type: string
        required: false
        default: '1.24'
      packages_with_index:
        type: boolean
        required: false
        default: false
        description: |
          Can be used for private repos. The helm chart will be uploaded to the gh-pages branch
      force_push_docker_image:
        type: boolean
        required: false
        default: false
        description: |
            If set to true, the docker image will be pushed to the registry even if the workflow is triggered by a pull request
      gcp_deb_dev_artifact_registry:
        type: string
        required: false
        default: deb-dev
        description: |
          The gcp artifact registry debian dev name
      gcp_deb_public_artifact_registry:
        type: string
        required: false
        default: deb-public
        description: |
          The gcp artifact registry debian public name
      gcp_yum_dev_artifact_registry:
        type: string
        required: false
        default: yum-dev
        description: |
          The gcp artifact registry yum dev name
      gcp_yum_public_artifact_registry:
        type: string
        required: false
        default: yum-public
        description: |
          The gcp artifact registry yum public name
      VERSION_BUMPER_APPID:
        type: string
        required: false
        default: false
        description: | 
          Github app ID to use for version bump
      coverage_artifacts_pattern:
        type: string
        required: false
        description: |
          pattern to download coverage artifacts
    secrets:
      SONAR_TOKEN:
        required: false
        description: Optional SonarCloud token
      PAT_TOKEN_EXTENSION_DEPLOYER:
        required: false
        description: Optional token to trigger extension restarts
      MAVEN_GPG_PRIVATE_KEY:
        required: false
        description: GPG private key to sign packages, required if build_linux_packages is true
      MAVEN_GPG_PRIVATE_KEY_PASSWORD:
        required: false
        description: GPG private key password, required if build_linux_packages is true
      PAT_TOKEN_GORELEASER:
        required: false
        description: PAT Token, required if build_linux_packages is true
      STEADYBIT_ARTIFACT_SERVER_USERNAME:
        required: false
        description: Username for artifact server, required if build_linux_packages is true
      STEADYBIT_ARTIFACT_SERVER_PASSWORD:
        required: false
        description: Password for artifact server, required if build_linux_packages is true
      SNYK_TOKEN:
        required: false
        description: Optional snyk token
      VERSION_BUMPER_SECRET:
        required: false
        description: Private key of the github app to use for version bump
      GCP_ARTIFACT_REGISTRY_IDENTITY_PROVIDER:
        required: false
        description: Identity provider to use to be able to push to gcp artifact registry

jobs:
  audit:
    name: Audit
    runs-on: ${{ inputs.runs_on }}
    timeout-minutes: 60
    env:
      sonar_available: ${{ secrets.SONAR_TOKEN  != '' && 'true' || 'false' }}
      snyk_available: ${{ secrets.SNYK_TOKEN  != '' && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove non-semver tags (from helmchart) for goreleaser to work properly
        run: |
          git tag -d $(git tag -l | grep -v "^v[0-9]*.[0-9]*.[0-9]*")

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Enable KVM group perms
        if: ${{ inputs.use_kvm }}
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo apt-get update
          sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu-user-static qemu-system-x86
          sudo usermod -a -G kvm,libvirt $USER
          sudo -u $USER env "PATH=$PATH" virsh domcapabilities --virttype="kvm"

      - name: Prepare audit
        if: ${{ inputs.run_make_prepare_audit }}
        run: |
          make prepare_audit

      - name: Audit
        run: |
          go mod download
          echo ${{ inputs.use_kvm }}
          if [ "${{ inputs.use_kvm }}" != 'true' ]; then
            make audit
          else
            echo 'exec in a new sell for the group change to take effect'
            sudo -u $USER env "PATH=$PATH" make audit
          fi

      - name: "[release] Snyk test"
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.snyk_available == 'true' }}
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --org=${{ vars.SNYK_ORG_ID }} --severity-threshold=high --project-name=${{ github.repository }} --target-reference=${{ github.ref_name }}
          command: test

      - name: Download e2e coverage files
        uses: actions/download-artifact@v4
        with:
          path: e2e
          pattern: "e2e-coverage-*"
          merge-multiple: true

      - name: SonarCloud Scan
        if: ${{ env.sonar_available == 'true' }}
        uses: sonarsource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: "[release] SonarCloud Quality Gate check"
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.sonar_available == 'true' }}
        uses: sonarsource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-images:
    name: Build Docker Images
    needs: [audit]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
      deployer_available: ${{ env.deployer_available }}
      version_bump_available: ${{ env.version_bump_available }}
    env:
      deployer_available: ${{ secrets.PAT_TOKEN_EXTENSION_DEPLOYER  != '' && 'true' || 'false' }}
      version_bump_available: ${{ (inputs.VERSION_BUMPER_APPID != '' && secrets.VERSION_BUMPER_SECRET  != '') && 'true' || 'false' }}
      snyk_available: ${{ secrets.SNYK_TOKEN  != '' && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove non-semver tags (from helmchart) for goreleaser to work properly
        run: |
          git tag -d $(git tag -l | grep -v "^v[0-9]*.[0-9]*.[0-9]*")

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the container registry
        if: inputs.force_push_docker_image || github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: "[release] Build Docker image release candidate"
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.snyk_available == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: false
          load: true
          tags: ghcr.io/${{ github.repository }}:rc
          build-args: |
            BUILD_SNAPSHOT=${{ !startsWith(github.ref, 'refs/tags/') }}
            NAME=${{ github.repository }}
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ github.sha }}

      - name: "[release] Snyk monitor docker image release candidate"
        # we need to run monitor before test to be able to ignore issues
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.snyk_available == 'true' }}
        uses: snyk/actions/docker@master
        with:
          image: ghcr.io/${{ github.repository }}:rc
          args: --file=Dockerfile --severity-threshold=high --project-name=${{ github.repository }} --target-reference=release-candidate --username=${{ github.actor }} --password=${{ secrets.GITHUB_TOKEN }}
          command: monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# Temporary disabled - http://support.snyk.io/hc/requests/84906 - ignoring issues via ui is not working
#      - name: "[release] Snyk test docker image release candidate"
#        if: ${{ startsWith(github.ref, 'refs/tags/') && env.snyk_available == 'true' }}
#        uses: snyk/actions/docker@master
#        with:
#          image: ghcr.io/${{ github.repository }}:rc
#          args: --file=Dockerfile --severity-threshold=high --project-name=${{ github.repository }} --target-reference=release-candidate
#          command: test
#        env:
#            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: ${{ inputs.force_push_docker_image || github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_SNAPSHOT=${{ !startsWith(github.ref, 'refs/tags/') }}
            NAME=${{ github.repository }}
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ github.sha }}

  snyk-monitor:
    name: "[Release] Snyk Monitor latest"
    uses: steadybit/extension-kit/.github/workflows/reusable-snyk-scan.yml@main
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [build-images]
    with:
      command: monitor
      container_image: ghcr.io/${{ github.repository }}:latest
      target_ref: latest
    secrets:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-packages:
    if: ${{ inputs.build_linux_packages }}
    name: Build Linux Packages
    needs: [audit]
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove non-semver tags (from helmchart) for goreleaser to work properly
        run: |
          git tag -d $(git tag -l | grep -v "^v[0-9]*.[0-9]*.[0-9]*")

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Export GPG key
        run: |
          mkdir -p gpg
          echo -n "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}" > gpg.key

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean ${{ !startsWith(github.ref, 'refs/tags/') && '--snapshot' || '' }} ${{ github.event_name == 'pull_request' && '--skip sign' || '' }}
        env:
          NFPM_KEY_FILE: gpg.key
          NFPM_DEFAULT_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN_GORELEASER }}

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          project_id: ${{ vars.GCP_ARTIFACT_REGISTRY_PROJECT_ID }}
          service_account: ${{ vars.GCP_ARTIFACT_REGISTRY_PROJECT_SA }}
          workload_identity_provider: ${{ secrets.GCP_ARTIFACT_REGISTRY_IDENTITY_PROVIDER }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest

      - name: "[build] Upload packages to gcp internal repositories"
        if: github.event_name != 'pull_request'
        working-directory: ./dist
        run: |
          for deb in $(find * -name '*.deb'); do
            ERROR=$(gcloud artifacts apt upload ${{ inputs.gcp_deb_dev_artifact_registry }} --location=${{ vars.GCP_ARTIFACT_REGISTRY_PROJECT_LOCATION }} --source=$deb 2>&1) || {
              echo "$ERROR"
              if echo "$ERROR" | grep -q 'updated packages must bear a new version'; then
                echo "The package is already uploaded. Continuing..."
              else
                echo "Package installation failed for a different reason."
                exit 1
              fi
            }
          done
          for rpm in $(find * -name '*.rpm'); do
            ERROR=$(gcloud artifacts yum upload ${{ inputs.gcp_yum_dev_artifact_registry }} --location=${{ vars.GCP_ARTIFACT_REGISTRY_PROJECT_LOCATION }} --source=$rpm 2>&1) || {
              echo "$ERROR"
              if echo "$ERROR" | grep -q 'updated packages must bear a new version'; then
                echo "The package is already uploaded. Continuing..."
              else
                echo "Package installation failed for a different reason."
                exit 1
              fi
            }
          done

      - name: "[release] Upload packages to gcp public repositories"
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        working-directory: ./dist
        run: |
          for deb in $(find * -name '*.deb'); do
            ERROR=$(gcloud artifacts apt upload ${{ inputs.gcp_deb_public_artifact_registry }} --location=${{ vars.GCP_ARTIFACT_REGISTRY_PROJECT_LOCATION }} --source=$deb 2>&1) || {
              echo "$ERROR"
              if echo "$ERROR" | grep -q 'updated packages must bear a new version'; then
                echo "The package is already uploaded. Continuing..."
              else
                echo "Package installation failed for a different reason."
                exit 1
              fi
            }
          done
          for rpm in $(find * -name '*.rpm'); do
            ERROR=$(gcloud artifacts yum upload ${{ inputs.gcp_yum_public_artifact_registry }} --location=${{ vars.GCP_ARTIFACT_REGISTRY_PROJECT_LOCATION }} --source=$rpm 2>&1) || {
              echo "$ERROR"
              if echo "$ERROR" | grep -q 'updated packages must bear a new version'; then
                echo "The package is already uploaded. Continuing..."
              else
                echo "Package installation failed for a different reason."
                exit 1
              fi
            }
          done 

  test-helm-charts:
    name: "Test Helm Charts"
    runs-on: ubuntu-latest
    needs: [audit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.12.2

      - name: Add dependency chart repos
        run: |
          helm repo add steadybit https://steadybit.github.io/helm-charts

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Add unit testing plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Run unit tests
        run: make charttesting

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Run chart-testing (lint)
        run: make chartlint

  bump-chart-version:
    name: Bump Chart Patch Version on main branch
    needs: [build-images]
    if: needs.build-images.outputs.version_bump_available == 'true' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ inputs.VERSION_BUMPER_APPID }}
          private-key: ${{ secrets.VERSION_BUMPER_SECRET }}

      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      # this commit will effectively cause another run of the workflow which then actually performs the helm chart release
      - run: |
          npm install -g semver
          make chart-bump-version APP_VERSION="${{ needs.build-images.outputs.version }}"
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git commit -am "chore: update helm chart version"
          git push

  release-helm-chart:
    name: "Release Helm Chart"
    runs-on: ubuntu-latest
    needs: [test-helm-charts]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.12.2

      - name: Add dependency chart repos
        run: |
          helm repo add steadybit https://steadybit.github.io/helm-charts

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: charts
          mark_as_latest: false
          packages_with_index: ${{ inputs.packages_with_index }}
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  trigger-test-environment-updates:
    name: Trigger test environment updates
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && needs.build-images.outputs.deployer_available == 'true'
    needs: [build-images]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: benc-uk/workflow-dispatch@v1
        with:
          ref: main
          workflow: extension-restart.yml
          repo: steadybit/extension-deployer
          inputs: '{"extension":"${{ github.repository }}","version":"${{ needs.build-images.outputs.version }}","revision":"${{ github.sha }}"}'
          token: ${{ secrets.PAT_TOKEN_EXTENSION_DEPLOYER }}

  check-go-package:
    name: Check Module Download on Tag
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-images]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Extract tag from GITHUB_REF
        id: get_tag
        run: |
          # Extract the tag name from the full ref (e.g., refs/tags/v2.1.5 becomes v2.1.5)
          tag="${GITHUB_REF##*/}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Using tag: $tag"

      - name: Get module name from go.mod
        id: get_module
        run: |
          # Extract the module name from the first line that starts with "module"
          module=$(grep '^module ' go.mod | awk '{print $2}')
          echo "module=$module" >> $GITHUB_OUTPUT
          echo "Module name: $module"

      - name: Create temporary module and test go get
        run: |
          # Create a temporary directory for testing
          mkdir temp-check && cd temp-check
          go mod init temp-check
          echo "Attempting to run: go get ${{ steps.get_module.outputs.module }}@${{ steps.get_tag.outputs.tag }}"
          go get "${{ steps.get_module.outputs.module }}@${{ steps.get_tag.outputs.tag }}"